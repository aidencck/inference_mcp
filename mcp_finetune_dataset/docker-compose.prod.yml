version: '3.8'

# 生产环境Docker Compose配置
# 使用方法: docker-compose -f docker-compose.prod.yml up -d

services:
  mcp-training:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - BUILD_ENV=production
    image: mcp-finetune:prod
    container_name: mcp-training-prod
    
    # GPU支持
    deploy:
      resources:
        limits:
          memory: 32G
          cpus: '16.0'
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
          memory: 16G
          cpus: '8.0'
    
    # 环境变量
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
      - PYTHONPATH=/app
      - HUGGINGFACE_HUB_CACHE=/app/.cache/huggingface
      - TRANSFORMERS_CACHE=/app/.cache/transformers
      - LOG_LEVEL=INFO
      - ENVIRONMENT=production
    
    # 数据卷挂载（生产环境使用命名卷）
    volumes:
      - mcp_models:/app/models
      - mcp_cache:/app/.cache
      - mcp_logs:/app/logs
      - mcp_outputs:/app/outputs
      - ./configs:/app/configs:ro  # 只读配置
    
    # 网络配置（仅内部访问）
    networks:
      - mcp-internal
    
    # 健康检查
    healthcheck:
      test: ["CMD", "python", "-c", "import torch; print('OK' if torch.cuda.is_available() else 'NO_GPU')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # 重启策略
    restart: unless-stopped
    
    # 安全配置
    read_only: false  # 训练需要写入权限
    user: "1000:1000"
    
    # 资源限制
    shm_size: '4gb'
    
    # 日志配置
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
    
    # 标签
    labels:
      - "com.mcp.service=training"
      - "com.mcp.environment=production"

  # 监控服务
  prometheus:
    image: prom/prometheus:latest
    container_name: mcp-prometheus
    
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    
    ports:
      - "127.0.0.1:9090:9090"
    
    networks:
      - mcp-internal
    
    restart: unless-stopped
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # 日志聚合
  fluentd:
    image: fluent/fluentd:v1.16-debian-1
    container_name: mcp-fluentd
    
    volumes:
      - ./monitoring/fluentd.conf:/fluentd/etc/fluent.conf:ro
      - mcp_logs:/var/log/mcp
    
    networks:
      - mcp-internal
    
    restart: unless-stopped
    
    depends_on:
      - mcp-training

  # 反向代理（可选）
  nginx:
    image: nginx:alpine
    container_name: mcp-nginx
    
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    
    ports:
      - "80:80"
      - "443:443"
    
    networks:
      - mcp-internal
      - mcp-external
    
    restart: unless-stopped
    
    depends_on:
      - mcp-training

# 网络配置
networks:
  mcp-internal:
    driver: bridge
    internal: true
  mcp-external:
    driver: bridge

# 数据卷配置
volumes:
  mcp_models:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/mcp/models
  
  mcp_cache:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/mcp/cache
  
  mcp_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/mcp/logs
  
  mcp_outputs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/mcp/outputs
  
  prometheus_data:
    driver: local